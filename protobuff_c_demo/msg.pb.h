// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: msg.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_msg_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_msg_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021009 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_msg_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_msg_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_msg_2eproto;
namespace msg {
class Msg;
struct MsgDefaultTypeInternal;
extern MsgDefaultTypeInternal _Msg_default_instance_;
}  // namespace msg
PROTOBUF_NAMESPACE_OPEN
template<> ::msg::Msg* Arena::CreateMaybeMessage<::msg::Msg>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace msg {

// ===================================================================

class Msg final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.Msg) */ {
 public:
  inline Msg() : Msg(nullptr) {}
  ~Msg() override;
  explicit PROTOBUF_CONSTEXPR Msg(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Msg(const Msg& from);
  Msg(Msg&& from) noexcept
    : Msg() {
    *this = ::std::move(from);
  }

  inline Msg& operator=(const Msg& from) {
    CopyFrom(from);
    return *this;
  }
  inline Msg& operator=(Msg&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Msg& default_instance() {
    return *internal_default_instance();
  }
  static inline const Msg* internal_default_instance() {
    return reinterpret_cast<const Msg*>(
               &_Msg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Msg& a, Msg& b) {
    a.Swap(&b);
  }
  inline void Swap(Msg* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Msg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Msg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Msg>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Msg& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Msg& from) {
    Msg::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Msg* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.Msg";
  }
  protected:
  explicit Msg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgInfoFieldNumber = 2,
    kMsgFromFieldNumber = 3,
    kMsgIdFieldNumber = 1,
  };
  // string MsgInfo = 2;
  void clear_msginfo();
  const std::string& msginfo() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_msginfo(ArgT0&& arg0, ArgT... args);
  std::string* mutable_msginfo();
  PROTOBUF_NODISCARD std::string* release_msginfo();
  void set_allocated_msginfo(std::string* msginfo);
  private:
  const std::string& _internal_msginfo() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_msginfo(const std::string& value);
  std::string* _internal_mutable_msginfo();
  public:

  // string MsgFrom = 3;
  void clear_msgfrom();
  const std::string& msgfrom() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_msgfrom(ArgT0&& arg0, ArgT... args);
  std::string* mutable_msgfrom();
  PROTOBUF_NODISCARD std::string* release_msgfrom();
  void set_allocated_msgfrom(std::string* msgfrom);
  private:
  const std::string& _internal_msgfrom() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_msgfrom(const std::string& value);
  std::string* _internal_mutable_msgfrom();
  public:

  // int64 MsgId = 1;
  void clear_msgid();
  int64_t msgid() const;
  void set_msgid(int64_t value);
  private:
  int64_t _internal_msgid() const;
  void _internal_set_msgid(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:msg.Msg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msginfo_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msgfrom_;
    int64_t msgid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_msg_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Msg

// int64 MsgId = 1;
inline void Msg::clear_msgid() {
  _impl_.msgid_ = int64_t{0};
}
inline int64_t Msg::_internal_msgid() const {
  return _impl_.msgid_;
}
inline int64_t Msg::msgid() const {
  // @@protoc_insertion_point(field_get:msg.Msg.MsgId)
  return _internal_msgid();
}
inline void Msg::_internal_set_msgid(int64_t value) {
  
  _impl_.msgid_ = value;
}
inline void Msg::set_msgid(int64_t value) {
  _internal_set_msgid(value);
  // @@protoc_insertion_point(field_set:msg.Msg.MsgId)
}

// string MsgInfo = 2;
inline void Msg::clear_msginfo() {
  _impl_.msginfo_.ClearToEmpty();
}
inline const std::string& Msg::msginfo() const {
  // @@protoc_insertion_point(field_get:msg.Msg.MsgInfo)
  return _internal_msginfo();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Msg::set_msginfo(ArgT0&& arg0, ArgT... args) {
 
 _impl_.msginfo_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.Msg.MsgInfo)
}
inline std::string* Msg::mutable_msginfo() {
  std::string* _s = _internal_mutable_msginfo();
  // @@protoc_insertion_point(field_mutable:msg.Msg.MsgInfo)
  return _s;
}
inline const std::string& Msg::_internal_msginfo() const {
  return _impl_.msginfo_.Get();
}
inline void Msg::_internal_set_msginfo(const std::string& value) {
  
  _impl_.msginfo_.Set(value, GetArenaForAllocation());
}
inline std::string* Msg::_internal_mutable_msginfo() {
  
  return _impl_.msginfo_.Mutable(GetArenaForAllocation());
}
inline std::string* Msg::release_msginfo() {
  // @@protoc_insertion_point(field_release:msg.Msg.MsgInfo)
  return _impl_.msginfo_.Release();
}
inline void Msg::set_allocated_msginfo(std::string* msginfo) {
  if (msginfo != nullptr) {
    
  } else {
    
  }
  _impl_.msginfo_.SetAllocated(msginfo, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.msginfo_.IsDefault()) {
    _impl_.msginfo_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.Msg.MsgInfo)
}

// string MsgFrom = 3;
inline void Msg::clear_msgfrom() {
  _impl_.msgfrom_.ClearToEmpty();
}
inline const std::string& Msg::msgfrom() const {
  // @@protoc_insertion_point(field_get:msg.Msg.MsgFrom)
  return _internal_msgfrom();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Msg::set_msgfrom(ArgT0&& arg0, ArgT... args) {
 
 _impl_.msgfrom_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.Msg.MsgFrom)
}
inline std::string* Msg::mutable_msgfrom() {
  std::string* _s = _internal_mutable_msgfrom();
  // @@protoc_insertion_point(field_mutable:msg.Msg.MsgFrom)
  return _s;
}
inline const std::string& Msg::_internal_msgfrom() const {
  return _impl_.msgfrom_.Get();
}
inline void Msg::_internal_set_msgfrom(const std::string& value) {
  
  _impl_.msgfrom_.Set(value, GetArenaForAllocation());
}
inline std::string* Msg::_internal_mutable_msgfrom() {
  
  return _impl_.msgfrom_.Mutable(GetArenaForAllocation());
}
inline std::string* Msg::release_msgfrom() {
  // @@protoc_insertion_point(field_release:msg.Msg.MsgFrom)
  return _impl_.msgfrom_.Release();
}
inline void Msg::set_allocated_msgfrom(std::string* msgfrom) {
  if (msgfrom != nullptr) {
    
  } else {
    
  }
  _impl_.msgfrom_.SetAllocated(msgfrom, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.msgfrom_.IsDefault()) {
    _impl_.msgfrom_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.Msg.MsgFrom)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace msg

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_msg_2eproto
